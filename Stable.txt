// SPDX-License-Identifier: MIT
pragma solidity ^0.8.0;

import "@openzeppelin/contracts/token/ERC20/ERC20.sol";
import "@openzeppelin/contracts/access/Ownable.sol";
import "@openzeppelin/contracts/security/Pausable.sol";

/**
 * @title Stablecoin
 * @dev Implementation of a fiat-collateralized stablecoin
 */
contract Stablecoin is ERC20, Ownable, Pausable {
    address public minter;
    address public blacklister;
    
    mapping(address => bool) public blacklisted;
    
    event Blacklisted(address indexed account);
    event UnBlacklisted(address indexed account);
    event MinterChanged(address indexed newMinter);
    event BlacklisterChanged(address indexed newBlacklister);
    
    /**
     * @dev Initialize the contract with token name and symbol
     */
    constructor(string memory name, string memory symbol) ERC20(name, symbol) {
        minter = msg.sender;
        blacklister = msg.sender;
    }
    
    /**
     * @dev Function to mint tokens
     * @param to The address that will receive the minted tokens
     * @param amount The amount of tokens to mint
     * @return A boolean that indicates if the operation was successful
     */
    function mint(address to, uint256 amount) external returns (bool) {
        require(msg.sender == minter, "Only minter can mint");
        require(!blacklisted[to], "Address is blacklisted");
        _mint(to, amount);
        return true;
    }
    
    /**
     * @dev Function to burn tokens
     * @param amount The amount of tokens to burn
     * @return A boolean that indicates if the operation was successful
     */
    function burn(uint256 amount) external returns (bool) {
        require(!blacklisted[msg.sender], "Address is blacklisted");
        _burn(msg.sender, amount);
        return true;
    }
    
    /**
     * @dev Override ERC20 transfer function to check for blacklisted addresses
     */
    function transfer(address to, uint256 amount) public override whenNotPaused returns (bool) {
        require(!blacklisted[msg.sender], "Sender is blacklisted");
        require(!blacklisted[to], "Recipient is blacklisted");
        return super.transfer(to, amount);
    }
    
    /**
     * @dev Override ERC20 transferFrom function to check for blacklisted addresses
     */
    function transferFrom(address from, address to, uint256 amount) public override whenNotPaused returns (bool) {
        require(!blacklisted[from], "Sender is blacklisted");
        require(!blacklisted[to], "Recipient is blacklisted");
        return super.transferFrom(from, to, amount);
    }
    
    /**
     * @dev Function to blacklist an address
     * @param account The address to blacklist
     */
    function blacklist(address account) external {
        require(msg.sender == blacklister, "Only blacklister can blacklist");
        blacklisted[account] = true;
        emit Blacklisted(account);
    }
    
    /**
     * @dev Function to remove an address from blacklist
     * @param account The address to remove from blacklist
     */
    function unBlacklist(address account) external {
        require(msg.sender == blacklister, "Only blacklister can unblacklist");
        blacklisted[account] = false;
        emit UnBlacklisted(account);
    }
    
    /**
     * @dev Function to change the minter address
     * @param newMinter The new minter address
     */
    function updateMinter(address newMinter) external onlyOwner {
        minter = newMinter;
        emit MinterChanged(newMinter);
    }
    
    /**
     * @dev Function to change the blacklister address
     * @param newBlacklister The new blacklister address
     */
    function updateBlacklister(address newBlacklister) external onlyOwner {
        blacklister = newBlacklister;
        emit BlacklisterChanged(newBlacklister);
    }
    
    /**
     * @dev Pause all token transfers
     */
    function pause() external onlyOwner {
        _pause();
    }
    
    /**
     * @dev Unpause all token transfers
     */
    function unpause() external onlyOwner {
        _unpause();
    }
}
