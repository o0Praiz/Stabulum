// SPDX-License-Identifier: MIT
pragma solidity ^0.8.20;

import "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol";
import "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol";
import "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol";
import "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol";
import "@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol";

/**
 * @title Stabulum
 * @dev Implementation of the Stabulum stablecoin
 * Features:
 * - ERC20 standard implementation
 * - Minting and burning controlled by authorized roles
 * - Pausable in case of emergencies
 * - Upgradeable via UUPS proxy pattern
 * - Access control with multiple roles
 */
contract Stabulum is 
    Initializable, 
    ERC20Upgradeable, 
    AccessControlUpgradeable, 
    PausableUpgradeable, 
    UUPSUpgradeable 
{
    // Role definitions
    bytes32 public constant MINTER_ROLE = keccak256("MINTER_ROLE");
    bytes32 public constant BURNER_ROLE = keccak256("BURNER_ROLE");
    bytes32 public constant PAUSER_ROLE = keccak256("PAUSER_ROLE");
    bytes32 public constant UPGRADER_ROLE = keccak256("UPGRADER_ROLE");
    bytes32 public constant BLACKLISTER_ROLE = keccak256("BLACKLISTER_ROLE");
    
    // Blacklisted addresses cannot transfer or receive tokens
    mapping(address => bool) private _blacklisted;
    
    // Events
    event Blacklisted(address indexed account);
    event BlacklistRemoved(address indexed account);
    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);

    // Reserve information for transparency
    struct ReserveInfo {
        string auditor;
        string reportURI;
        uint256 timestamp;
        uint256 totalReserve;
    }
    
    ReserveInfo public latestReserveInfo;
    
    /// @custom:oz-upgrades-unsafe-allow constructor
    constructor() {
        _disableInitializers();
    }
    
    /**
     * @dev Initializes the contract with initial roles and token details
     * @param admin The initial admin address
     */
    function initialize(address admin) public initializer {
        __ERC20_init("Stabulum", "STAB");
        __AccessControl_init();
        __Pausable_init();
        __UUPSUpgradeable_init();
        
        _grantRole(DEFAULT_ADMIN_ROLE, admin);
        _grantRole(MINTER_ROLE, admin);
        _grantRole(BURNER_ROLE, admin);
        _grantRole(PAUSER_ROLE, admin);
        _grantRole(UPGRADER_ROLE, admin);
        _grantRole(BLACKLISTER_ROLE, admin);
    }
    
    /**
     * @dev Mints new tokens to a specified address
     * @param to The address that will receive the minted tokens
     * @param amount The amount of tokens to mint
     */
    function mint(address to, uint256 amount) public onlyRole(MINTER_ROLE) whenNotPaused {
        require(!_blacklisted[to], "Stabulum: recipient is blacklisted");
        _mint(to, amount);
    }
    
    /**
     * @dev Burns tokens from a specified address
     * @param from The address from which tokens will be burned
     * @param amount The amount of tokens to burn
     */
    function burn(address from, uint256 amount) public onlyRole(BURNER_ROLE) whenNotPaused {
        require(!_blacklisted[from], "Stabulum: account is blacklisted");
        _burn(from, amount);
    }
    
    /**
     * @dev Burns tokens from the sender's address
     * @param amount The amount of tokens to burn
     */
    function burnOwn(uint256 amount) public whenNotPaused {
        require(!_blacklisted[msg.sender], "Stabulum: account is blacklisted");
        _burn(msg.sender, amount);
    }
    
    /**
     * @dev Adds an address to the blacklist
     * @param account The address to blacklist
     */
    function blacklist(address account) public onlyRole(BLACKLISTER_ROLE) {
        _blacklisted[account] = true;
        emit Blacklisted(account);
    }
    
    /**
     * @dev Removes an address from the blacklist
     * @param account The address to remove from the blacklist
     */
    function removeFromBlacklist(address account) public onlyRole(BLACKLISTER_ROLE) {
        _blacklisted[account] = false;
        emit BlacklistRemoved(account);
    }
    
    /**
     * @dev Checks if an address is blacklisted
     * @param account The address to check
     * @return True if the address is blacklisted
     */
    function isBlacklisted(address account) public view returns (bool) {
        return _blacklisted[account];
    }
    
    /**
     * @dev Updates reserve information for transparency
     * @param auditor The name of the auditor
     * @param reportURI URI pointing to the detailed audit report
     * @param totalReserve The total amount in reserve
     */
    function updateReserveInfo(
        string memory auditor, 
        string memory reportURI, 
        uint256 totalReserve
    ) public onlyRole(DEFAULT_ADMIN_ROLE) {
        latestReserveInfo = ReserveInfo({
            auditor: auditor,
            reportURI: reportURI,
            timestamp: block.timestamp,
            totalReserve: totalReserve
        });
    }
    
    /**
     * @dev Pauses all token transfers
     */
    function pause() public onlyRole(PAUSER_ROLE) {
        _pause();
    }
    
    /**
     * @dev Unpauses all token transfers
     */
    function unpause() public onlyRole(PAUSER_ROLE) {
        _unpause();
    }
    
    /**
     * @dev Hook that is called before any transfer of tokens
     * @param from The address tokens are transferred from
     * @param to The address tokens are transferred to
     * @param amount The amount of tokens to be transferred
     */
    function _beforeTokenTransfer(
        address from,
        address to,
        uint256 amount
    ) internal override whenNotPaused {
        require(!_blacklisted[from], "Stabulum: sender is blacklisted");
        require(!_blacklisted[to], "Stabulum: recipient is blacklisted");
        super._beforeTokenTransfer(from, to, amount);
    }
    
    /**
     * @dev Hook that is called in the upgradeToAndCall function
     * @param newImplementation The new implementation address
     */
    function _authorizeUpgrade(address newImplementation) internal override onlyRole(UPGRADER_ROLE) {}
}
