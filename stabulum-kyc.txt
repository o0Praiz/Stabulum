// SPDX-License-Identifier: MIT
pragma solidity ^0.8.20;

import "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol";
import "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol";
import "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol";
import "@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol";

/**
 * @title StabulumKYCProvider
 * @dev KYC and AML compliance provider for Stabulum stablecoin
 * Features:
 * - User verification status tracking
 * - Role-based access control for KYC officers
 * - Verification level system
 */
contract StabulumKYCProvider is 
    Initializable, 
    AccessControlUpgradeable, 
    PausableUpgradeable, 
    UUPSUpgradeable 
{
    // Role definitions
    bytes32 public constant KYC_OFFICER_ROLE = keccak256("KYC_OFFICER_ROLE");
    bytes32 public constant UPGRADER_ROLE = keccak256("UPGRADER_ROLE");
    bytes32 public constant PAUSER_ROLE = keccak256("PAUSER_ROLE");
    
    // KYC verification status
    enum VerificationStatus { NONE, PENDING, VERIFIED, REJECTED }
    
    // KYC verification level
    enum VerificationLevel { NONE, BASIC, ADVANCED, PREMIUM }
    
    // User KYC records
    struct UserRecord {
        address userAddress;
        string userDataHash; // Hash of user's KYC data stored off-chain
        VerificationStatus status;
        VerificationLevel level;
        uint256 timestamp;
        address verifier;
        uint256 expirationTime;
    }
    
    // Mapping from user address to verification record
    mapping(address => UserRecord) public userRecords;
    
    // Array of all verified users
    address[] public verifiedUsers;
    
    // Mapping for quick lookup if an address is verified
    mapping(address => bool) public isVerified;
    
    // Events
    event UserRegistered(address indexed userAddress, string userDataHash);
    event UserVerified(address indexed userAddress, VerificationLevel level, address indexed verifier);
    event UserRejected(address indexed userAddress, address indexed verifier, string reason);
    event UserExpired(address indexed userAddress);
    
    /// @custom:oz-upgrades-unsafe-allow constructor
    constructor() {
        _disableInitializers();
    }
    
    /**
     * @dev Initializes the contract
     * @param admin The initial admin address
     */
    function initialize(address admin) public initializer {
        __AccessControl_init();
        __Pausable_init();
        __UUPSUpgradeable_init();
        
        _grantRole(DEFAULT_ADMIN_ROLE, admin);
        _grantRole(KYC_OFFICER_ROLE, admin);
        _grantRole(UPGRADER_ROLE, admin);
        _grantRole(PAUSER_ROLE, admin);
    }
    
    /**
     * @dev Registers a user for KYC verification
     * @param userDataHash Hash of user's KYC data stored off-chain
     */
    function registerUser(string memory userDataHash) public whenNotPaused {
        UserRecord storage record = userRecords[msg.sender];
        
        // Initialize or update user record
        if (record.userAddress == address(0)) {
            record.userAddress = msg.sender;
            record.status = VerificationStatus.PENDING;
            record.level = VerificationLevel.NONE;
        } else {
            require(
                record.status != VerificationStatus.PENDING,
                "Verification already pending"
            );
            record.status = VerificationStatus.PENDING;
        }
        
        record.userDataHash = userDataHash;
        record.timestamp = block.timestamp;
        
        emit UserRegistered(msg.sender, userDataHash);
    }
    
    /**
     * @dev Verifies a user after KYC check
     * @param userAddress Address of the user to verify
     * @param level Verification level assigned to the user
     * @param validityPeriod Time in seconds for which the verification is valid
     */
    function verifyUser(
        address userAddress, 
        VerificationLevel level, 
        uint256 validityPeriod
    ) 
        public 
        onlyRole(KYC_OFFICER_ROLE) 
        whenNotPaused 
    {
        require(userAddress != address(0), "Invalid user address");
        require(level != VerificationLevel.NONE, "Invalid verification level");
        require(validityPeriod > 0, "Validity period must be greater than zero");
        
        UserRecord storage record = userRecords[userAddress];
        require(record.userAddress == userAddress, "User not registered");
        
        record.status = VerificationStatus.VERIFIED;
        record.level = level;
        record.timestamp = block.timestamp;
        record.verifier = msg.sender;
        record.expirationTime = block.timestamp + validityPeriod;
        
        // Add to verified users list if not already added
        if (!isVerified[userAddress]) {
            verifiedUsers.push(userAddress);
            isVerified[userAddress] = true;
        }
        
        emit UserVerified(userAddress, level, msg.sender);
    }
    
    /**
     * @dev Rejects a user's KYC verification
     * @param userAddress Address of the user to reject
     * @param reason Reason for rejection
     */
    function rejectUser(address userAddress, string memory reason) 
        public 
        onlyRole(KYC_OFFICER_ROLE) 
        whenNotPaused 
    {
        require(userAddress != address(0), "Invalid user address");
        
        UserRecord storage record = userRecords[userAddress];
        require(record.userAddress == userAddress, "User not registered");
        
        record.status = VerificationStatus.REJECTED;
        record.timestamp = block.timestamp;
        record.verifier = msg.sender;
        
        // Remove from verified users if previously verified
        if (isVerified[userAddress]) {
            removeFromVerifiedUsers(userAddress);
            isVerified[userAddress] = false;
        }
        
        emit UserRejected(userAddress, msg.sender, reason);
    }
    
    /**
     * @dev Checks if a user's verification is still valid
     * @param userAddress Address of the user to check
     * @return Whether the user's verification is valid
     */
    function isUserVerified(address userAddress) public view returns (bool) {
        UserRecord memory record = userRecords[userAddress];
        
        if (record.status != VerificationStatus.VERIFIED) {
            return false;
        }
        
        if (block.timestamp > record.expirationTime) {
            return false;
        }
        
        return true;
    }
    
    /**
     * @dev Gets a user's verification level
     * @param userAddress Address of the user to check
     * @return The user's verification level
     */
    function getUserLevel(address userAddress) public view returns (VerificationLevel) {
        if (!isUserVerified(userAddress)) {
            return VerificationLevel.NONE;
        }
        
        return userRecords[userAddress].level;
    }
    
    /**
     * @dev Gets the number of verified users
     * @return The number of verified users
     */
    function getVerifiedUserCount() public view returns (uint256) {
        return verifiedUsers.length;
    }
    
    /**
     * @dev Gets detailed user record
     * @param userAddress Address of the user
     * @return All user record details
     */
    function getUserRecord(address userAddress) 
        public 
        view 
        returns (
            address userAddr,
            string memory dataHash,
            VerificationStatus status,
            VerificationLevel level,
            uint256 timestamp,
            address verifier,
            uint256 expirationTime,
            bool currentlyValid
        ) 
    {
        UserRecord memory record = userRecords[userAddress];
        
        bool valid = (record.status == VerificationStatus.VERIFIED && block.timestamp <= record.expirationTime);
        
        return (
            record.userAddress,
            record.userDataHash,
            record.status,
            record.level,
            record.timestamp,
            record.verifier,
            record.expirationTime,
            valid
        );
    }
    
    /**
     * @dev Expires a user's verification
     * @param userAddress Address of the user to expire
     */
    function expireUser(address userAddress) public onlyRole(KYC_OFFICER_ROLE) {
        require(isVerified[userAddress], "User not verified");
        
        UserRecord storage record = userRecords[userAddress];
        record.expirationTime = block.timestamp;
        
        removeFromVerifiedUsers(userAddress);
        isVerified[userAddress] = false;
        
        emit UserExpired(userAddress);
    }
    
    /**
     * @dev Internal function to remove an address from the verified users array
     * @param userAddress Address to remove
     */
    function removeFromVerifiedUsers(address userAddress) internal {
        uint256 length = verifiedUsers.length;
        
        for (uint256 i = 0; i < length; i++) {
            if (verifiedUsers[i] == userAddress) {
                // Move the last element to the position of the element to delete
                if (i < length - 1) {
                    verifiedUsers[i] = verifiedUsers[length - 1];
                }
                
                // Remove the last element
                verifiedUsers.pop();
                break;
            }
        }
    }
    
    /**
     * @dev Pauses the contract
     */
    function pause() public onlyRole(PAUSER_ROLE) {
        _pause();
    }
    
    /**
     * @dev Unpauses the contract
     */
    function unpause() public onlyRole(PAUSER_ROLE) {
        _unpause();
    }
    
    /**
     * @dev Function that should revert when `msg.sender` is not authorized to upgrade the contract
     * @param newImplementation Address of the new implementation
     */
    function _authorizeUpgrade(address newImplementation) internal override onlyRole(UPGRADER_ROLE) {}
}
